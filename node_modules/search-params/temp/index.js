"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var encode_1 = require("./encode");
var utils_1 = require("./utils");
/**
 * Parse a querystring and return an object of parameters
 */
exports.parse = function (path, opts) {
    var options = encode_1.makeOptions(opts);
    return utils_1.getSearch(path)
        .split('&')
        .reduce(function (params, param) {
        var _a = param.split('='), rawName = _a[0], value = _a[1];
        var _b = utils_1.parseName(rawName), hasBrackets = _b.hasBrackets, name = _b.name;
        var currentValue = params[name];
        var decodedValue = encode_1.decode(value, options);
        if (currentValue === undefined) {
            params[name] = hasBrackets ? [decodedValue] : decodedValue;
        }
        else {
            params[name] = [].concat(currentValue, decodedValue);
        }
        return params;
    }, {});
};
/**
 * Build a querystring from an object of parameters
 */
exports.build = function (params, opts) {
    var options = encode_1.makeOptions(opts);
    return Object.keys(params)
        .filter(function (paramName) { return utils_1.isSerialisable(params[paramName]); })
        .map(function (paramName) { return encode_1.encode(paramName, params[paramName], options); })
        .filter(Boolean)
        .join('&');
};
/**
 * Remove a list of parameters from a querystring
 */
exports.omit = function (path, paramsToOmit, opts) {
    var options = encode_1.makeOptions(opts);
    var searchPart = utils_1.getSearch(path);
    if (searchPart === '') {
        return {
            querystring: '',
            removedParams: {}
        };
    }
    var _a = path.split('&').reduce(function (_a, chunk) {
        var left = _a[0], right = _a[1];
        var rawName = chunk.split('=')[0];
        var name = utils_1.parseName(rawName).name;
        return paramsToOmit.indexOf(name) === -1
            ? [left.concat(chunk), right]
            : [left, right.concat(chunk)];
    }, [[], []]), kept = _a[0], removed = _a[1];
    return {
        querystring: kept.join('&'),
        removedParams: exports.parse(removed.join('&'), options)
    };
};
/**
 * Remove a list of parameters from a querystring
 */
exports.keep = function (path, paramsToKeep, opts) {
    var options = encode_1.makeOptions(opts);
    var searchPart = utils_1.getSearch(path);
    if (searchPart === '') {
        return {
            keptParams: {},
            querystring: ''
        };
    }
    var _a = path.split('&').reduce(function (_a, chunk) {
        var left = _a[0], right = _a[1];
        var rawName = chunk.split('=')[0];
        var name = utils_1.parseName(rawName).name;
        return paramsToKeep.indexOf(name) >= 0
            ? [left.concat(chunk), right]
            : [left, right.concat(chunk)];
    }, [[], []]), kept = _a[0], removed = _a[1];
    return {
        keptParams: exports.parse(kept.join('&'), options),
        querystring: kept.join('&')
    };
};
